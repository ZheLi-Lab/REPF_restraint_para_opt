import parmed as pmd
import mdtraj as md
import numpy as np
from numpy import linalg as LA
import math
class Sel_rest_atm():
    def __init__(self, traj, parm, top_file, xyz_file, ligname='MOL'):
        '''Initializing
        
        Parameters
        ----------
        traj: <class 'mdtraj.core.trajectory.Trajectory'>
            The trajectory class generated by mdtraj.
        parm: such as <class 'parmed.gromacs.gromacstop.GromacsTopologyFile'>
            The topology class generated by parmed.
        ligname: str, default: 'MOL'
            The residue name of ligand.
        '''    
        self.ligname = ligname 
        self.xyz_file = xyz_file
        self.parm = parm
        self.traj = traj
        self.top = self.traj.topology   
        self.L1 = None
        self.L2 = None
        self.P1 = None
        self.M = []
        self.Q = []
        lig_list = []
        rec_list = []
        self.lig_list = lig_list
        self.rec_list = rec_list
        self.one_bond = []
        self.two_bond = []
        self.res_list = []
    def get_N_O_atom(self):
        '''Iterate over all nitrogen/oxygen atoms in the ligand and all nitrogen/oxygen atoms in the 
        protein to find the closest distance.
        '''
        self.MOL_N_O_atoms=[]
        for atom_idx in self.top.select('resname MOL'):
            if self.parm.atoms[atom_idx].element_name == 'O':
                self.MOL_N_O_atoms.append(atom_idx)
                #N_O_atoms.append(atom_idx)
            elif self.parm.atoms[atom_idx].element_name == 'N':
                self.MOL_N_O_atoms.append(atom_idx)
        
        self.pro_N_O_atoms=[]
        for atom_idx in self.top.select('protein'):
            if self.parm.atoms[atom_idx].element_name == 'O':
                self.pro_N_O_atoms.append(atom_idx)
            elif self.parm.atoms[atom_idx].element_name == 'N':
                self.pro_N_O_atoms.append(atom_idx)
        return self.MOL_N_O_atoms, self.pro_N_O_atoms
    
    def calc_N_O_dist(self):
        '''Find the closest distance of two nitrogen/oxygen atoms.
        parameters
        ----------
        L1,P1 :int
             the index of the cloest of two nitrogen/oxygen atoms, L1 from ligand, P1 from receptor. As the first restrian atom .
        '''
        self.get_N_O_atom()
        all_N_O_list = []
        for mol_atom_idx in self.MOL_N_O_atoms:
            for pro_atom_idx in self.pro_N_O_atoms:
                all_N_O_list.append([mol_atom_idx,pro_atom_idx])
        self.cloest_dis = np.min(md.compute_distances(self.traj,all_N_O_list ))
        self.min_idx = np.argmin(md.compute_distances(self.traj,all_N_O_list ))
        self.L1, self.P1 = all_N_O_list[self.min_idx]
         

    def two_bond_away_atom(self,atom_idx):
        '''Identify all ligand atoms up to two bonds away from L1 (name this set M).
        Identify all protein atoms up to two bonds away from P1(name this set Q).
        '''
        #atom_idx = 0
        
        self.one_bond = [i.idx for i in self.parm.atoms[atom_idx].bond_partners if i.element_name != 'H']
        for atom in self.one_bond:
            self.two_bond = [atom.idx for atom in self.parm.atoms[atom].bond_partners if atom.element_name != 'H' ]
        two_bond_away_atoms = self.one_bond + self.two_bond
        #print(two_bond_away_atoms)
        return two_bond_away_atoms
    def get_M_Q_set(self):
        '''Identify all ligand atoms up to two bonds away from L1 (name this set M). L1_two_bond_molatoms
        Identify all protein atoms up to two bonds away from P1(name this set Q).    P1_two_bond_proatoms
        '''
        self.calc_N_O_dist()
        self.M = self.two_bond_away_atom(self.L1)
        self.Q = self.two_bond_away_atom(self.P1)
        
    def calc_angle(self,atom1_xyz,atom2_xyz,atom3_xyz):
        '''Calculate the angle between the atom atom1, atom2, and atom3.
        parameter
        ----------
        atom1_xyz: array_like
            A array_like object that stores three floats, which are x, y, z.
        Return
        ----------
        theta/math.pi*180.0: The angle in degree.

        '''
        a1x, a1y, a1z = atom1_xyz
        a2x, a2y, a2z = atom2_xyz
        a3x, a3y, a3z = atom3_xyz
        np.seterr(divide='ignore', invalid='ignore')
        vec1=np.array([a1x - a2x,  a1y - a2y,  a1z - a2z ])
        vec2=np.array([a3x - a2x, a3y - a2y, a3z - a3z ])
        cos_theta=vec1.dot(vec2)/(LA.norm(vec1)*LA.norm(vec2))
        try:
            theta=math.acos(cos_theta)
        except:
            theta=0
    
        return theta/math.pi*180.0
    

    def get_L2_P2_rest_atom(self, list_atom1, atom2, atom3 ):
        '''Select the m which yields the angle closest to 90 degrees to define L2. 
        Iterate over all remaining M atoms and calculate the angle m-L2-L1. 
        Select the m which yields the angle closest to 90 degrees to define L3.
        parameters
        ----------
        L1,L2,L3,P1,P2,P3 :int
        [L1,L2,L3,P1,P2,P3] =res_atoms.The index of first restraint atom of ligand, which involves in forming the HB bond. (Start from 1)
        Index of six restrian atoms.
        ----------
        res_lst : Second level nested list.
        The index of first restraint atom of ligand, which involves in forming the HB bond. (Start from 1)
        '''
        angl_list = []
        for atom in list_atom1 :
            angl_list.append(self.calc_angle( self.traj._xyz[0][atom], self.traj._xyz[0][atom2], self.traj._xyz[0][atom3])) 
        diffs = [math.fabs(x - 90) for x in angl_list]
        res_atom = list_atom1[diffs.index(min(diffs))]
        del list_atom1[diffs.index(min(diffs))]
        return res_atom

    def main(self):
        self.get_M_Q_set()# will update self.M and self.Q
        self.L2 = self.get_L2_P2_rest_atom(self.M, self.L1, self.P1)
        self.L3 = self.get_L2_P2_rest_atom(self.M, self.L2, self.L1)
        self.P2 = self.get_L2_P2_rest_atom(self.Q, self.P1, self.L1)
        self.P3 = self.get_L2_P2_rest_atom(self.Q, self.P2, self.P1)
        res_atoms =[self.L1+1, self.L2+1, self.L3+1, self.P1+1, self.P2+1, self.P3+1]
        self.res_list.append(res_atoms)
        return self.res_list
 




    
if __name__ == '__main__':
    top_file = 'example/protein.prmtop'  
    xyz_file = 'example/protein.rst7'
    parm = pmd.load_file(top_file,  xyz=xyz_file)
    traj = md.load(xyz_file, top=top_file)
    d = Sel_rest_atm(traj, parm, top_file, xyz_file)
    lst_d = d.main()
    print(lst_d)

