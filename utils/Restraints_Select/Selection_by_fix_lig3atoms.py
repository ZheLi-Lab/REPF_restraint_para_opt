import itertools
from .Selection_by_lig_shape import *

def fix_ligand_3atoms_based_sel(traj,fix_lig_3atoms, lig_resi_name='MOL'):
    '''LIGAND'S RESTRAINT ATOMS: Any one of a pair of heavy atoms with the farthest distance from each other in the ligand small molecule is used as the first restraint atom from the ligand, and then the heavy atom closest to the midpoint of the above-mentioned farthest atomic pair is selected as the second atom from the ligand. select the heavy atom of the small molecule as the third atom that satisfies the following two conditions. First, the angle between the atom and the second and first selected heavy atom is between 45 degrees and 135 degrees; second, the heavy atom is the farthest away from the second selected atom in the small molecule heavy atoms.
RECEPTOR'S RESTRAINT ATOMS: The CA, C, and O atoms of amino acids within three angstroms from the ligand serve as the first, second, and third bound atoms from the acceptor, respectively.

    Parameters
    ----------
    traj: <class 'mdtraj.core.trajectory.Trajectory'>
        The trajectory class generated by mdtraj.
    fix_lig_3atoms: list
        A list containing the index of the three atoms from ligand needed for restraint.(Start from 1)
    lig_resi_name: str
        The residue name of the ligand, default: 'MOL'.

    Return
    ----------
    lst_z: list
        A list containing many list. 
        Every list in the lst_z containing the index of the six atoms needed for restraint.(Start from 1)

    Example
    ----------
    >>> import numpy as np
    >>> import math
    >>> from numpy import linalg as LA
    >>> import mdtraj as md
    >>> traj = md.load('complex.gro')
    >>> ligname = 'MOL'
    >>> fix_lig_3atoms = [ 2126, 2149, 2147 ]
    >>> lst_z = ligand_shape_based_sel(traj, fix_lig_3atoms, ligname)
    '''

    top = traj.topology
    for i in top.atoms:
        atom_id = i.index+1
        if atom_id in fix_lig_3atoms:
            assert "H" not in i.name, f"The given three atoms of ligand include H atoms, whose atom_id is {atom_id}"
    
    lig_atoms = [ list(lig_atom) for lig_atom in list(itertools.permutations(fix_lig_3atoms)) ]
    lst_z=[]
    ligname=lig_resi_name
    within3A_res_list = get_res_idx_within_one_residue(traj, ligname, 0.3, 0)
    # print(within3A_res_list)
    #selection base on resname
    muti_three_res_atom_lst = []
    for i in within3A_res_list:
        res_CA = top.select(f'residue {i} and name CA')[0]+1
        res_C = top.select(f'residue {i} and name C')[0]+1
        res_O = top.select(f'residue {i} and name O')[0]+1
        single_res_list = [res_CA, res_C, res_O]
        muti_three_res_atom_lst.append(single_res_list)
        for lig_atom in lig_atoms:
            single_six = lig_atom+single_res_list
            lst_z.append(single_six)
    return lst_z 


if __name__ == '__main__':
    traj = md.load('/nfs/export3_25T/Bygroup_FEP_data/3U5J_proof_of_concept/dc_abfe_boresch_sasa_forward_state_continue/3u5j_3/protein.rst7', top='/nfs/export3_25T/Bygroup_FEP_data/3U5J_proof_of_concept/dc_abfe_boresch_sasa_forward_state_continue/3u5j_3/protein.prmtop')
    ligname = 'MOL'
    iflog = True
    fix_lig_3atoms = [ 2126, 2149, 2147 ]
    lst_z = fix_ligand_3atoms_based_sel(traj, fix_lig_3atoms, ligname)
    if iflog:
        grp_num1=len(lst_z)
        print(f"Selected by fix_lig_3atoms_based_stategy: {lst_z} with number of {grp_num1}")
        lst_z_file=open('based_fix_lig_3atoms', 'w+')
        print(str(lst_z), file=lst_z_file)
        lst_z_file.close()