[normalmd]
normalmd=False

[alchemical]
alchemical = True
mode = normal
lambdas_json= ./lambdas.json
lambdas_group= lambdas_group_2stp
temperature = 300.0
timestep = 2 
nsteps = 100
niterations = 10000
pdbx = None
current_group_nb = None
current_group_chg = None
save_traj = False
reportstate_freq = 1000
savetraj_freq = 5000
input_state = npt_final_state.xml
if_min_heat_density = False
annihilate_electrostatics = True
cal_adj_ene_num = all
#simulation_lambdas_name = _SIMU_LAMBDA_NAME_ #kbond = 20 #kangle = 0
#kdihedral = 0


[restraint]
restraint = True
temperature = 300.0
timestep = 2
# increase temperature 50 times within 25000 timesteps (in this case, each time increase 6 Kelvin)
heat_nsteps = 25000 
heat_iterations = 50 
density_nsteps = 25000 # density
npt_nsteps = 1000000 # production with plumed

save_traj = False
reportstate_freq = 1000
savetraj_freq = 50000
f_plumed_input = plumed.dat
f_plumed_output = Colvar
lambdas_json = ./lambdas.json
lambdas_group = lambdas_group_2stp
fake_state_xml = fake_state.xml # for skipping the running of the state_s0, if not state_s0.xml, it will not work.
first_state_csv = npt_state.csv
plumed_freq = 100 # plumed record frequency
crd = None # assigned by the openmm-FEP-run.py -c option, but you can give the coordinate file of the structure that you like for the generation of candidate groups of restraint
top = None # assigned by the openmm-FEP-run.py -p option, but you can give the topology file of the structure that you like for the generation of candidate groups of restraint
res_sele_strategy = 'Multiple' # could be 'lig_shape|HB_pair|HB_mainchain|Multiple'
opt_cost_name = 'RED_E_cost' # could be 'RED_E_cost' or 'dG_forward' or False
if_mean = False 
if_init_pose = False
preliminary_md_inital_state = None
preliminary_min_and_heat = True
#f_restraint = res_databystd.csv # the file logging the six-degree-of-freedom restraint pararmeters





